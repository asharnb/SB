<?php

/**
 * @file
 * Contains studiobridge_store_images.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use \Drupal\node\Entity\Node;
use \Drupal\file\Entity\File;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;

/**
 * Implements hook_help().
 */
function studiobridge_store_images_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the studiobridge_store_images module.
    case 'help.page.studiobridge_store_images':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This is StudioBridge custom module to assign images to products when system recieved a image.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 *
 * This function is created for to add received image to current product in the current session.
 */
function studiobridge_store_images_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
    // todo: save logs here
    \Drupal::logger('test_module')->notice('New file received');

    $bundle = $entity->bundle(); //image
    $values = $entity->toArray();

  // When new image is relieved by server, assign it to Current open product of particular session
    if($bundle == 'image' && isset($values['field_session'][0]['target_id'])){

        $session_id = $values['field_session'][0]['target_id'];
        //$session_id = 22;

        //\Drupal::logger('test_module')->notice('<pre>'.print_r($values,true).'<pre>');

        // todo : attach width, height and other image properties
        $image =  array(
            'target_id' => $values['fid'][0]['value'],
            'alt' => $values['field_image_alt_text'][0]['value'],
            'title' => $values['field_image_title_text'][0]['value'],
            //'width' => '283',
            //'height' => '266',
            //'url' => '/file/43',
        );

        // Load existing node and attach file.
        // @todo: take product nid dynamically. (current Product in the session sent by external)
        // @todo: if no product available then create unmapped product & add it to that

        // On page load we need to identify that current open product
        $product_last_updated = studiobridge_store_images_get_open_product($session_id);

        $session = Node::load($session_id);
        $session_uid = $session->getOwnerId();

        // todo : get scanned product from state:
        $scanned_product_nid = \Drupal::state()->get('last_scan_product_nid'.$session_uid.'_'.$session_id,false);

        if($scanned_product_nid){
          $node = Node::load($scanned_product_nid);
          $node_title = $node->getTitle();
          $bundle = $node->bundle();
          \Drupal::logger('krishna')->notice($node_title.'--'.$bundle);
        }
        elseif($product_last_updated){
          $node = $product_last_updated;
        }
        else{
          studiobridge_store_images_create_unmapped_product($image, $session_id);
          return;
        }

        // Get the available images
        $images = $node->field_images->getValue();

        // add new image to existing
        $images = array_merge($images,$image);

        // Set the image array to image field
        $node->field_images->setValue($images);

        // finally save the node
        $node->save();

        // todo : add product to session
        studiobridge_store_images_add_product_to_session($session_id, $node);

    }

}

/**
 * @param array $attachments
 */
function studiobridge_store_images_page_attachments(array &$attachments) {
    //echo \Drupal::routeMatch()->getRouteName(); die;
    $route_name = \Drupal::routeMatch()->getRouteName();
    if ($route_name === 'view.individual_project_view.page_1' ||
        $route_name == 'view.individual_project_view.page_2'  ||
        $route_name == 'view.individual_project_view.page_3'  ||
        $route_name == 'view.view_sessions.page_3' ||
        $route_name == 'studiobridge_live_shoot_page.form'
    )
    {
        $attachments['#attached']['library'][] = 'studiobridge_store_images/studio-bridge-view-product';
    }
}

/*
 * Helper function to create unmapped products.
 */
function studiobridge_store_images_create_unmapped_product($image = array(), $session_id, $identifier='UnMapped'){
  //$user = \Drupal::currentUser();
  //$uid = $user->id();

  // The owner of session will be become owner of unmapped product
  $session = Node::load($session_id);
  $session_uid = $session->getOwnerId();

    $values = array(
        'nid' => NULL,
        'type' => 'unmapped_products',
        'title' => $identifier,
        'uid' => $session_uid,
        'status' => TRUE,
        'field_images' => $image
    );
    $node = \Drupal::entityManager()->getStorage('node')->create($values);
    $node->save();

    \Drupal::state()->set('last_scan_product_nid'.$session_uid.'_'.$session_id,$node->id());

    studiobridge_store_images_add_product_to_session($session_id, $node);
}

/*
 * Helper function to add product to session.
 */
function studiobridge_store_images_add_product_to_session($session_id, $node){
    // Load session node object
    $session_node = Node::load($session_id);
    // Get products
    $session_products = $session_node->field_product->getValue();
    // Get product id
    $product_nid = $node->id();

    // Check for this product already exist in the current session
    // todo : other logs and property settings may come here
    $product_exist = false;
    if(count($session_products)){
        foreach($session_products as $each){
            if($each['target_id'] == $product_nid){
                $product_exist = true;
                break;
            }
        }
    }
    if(!$product_exist){
        $product = array(array(
            'target_id' => $product_nid
        ));
        $products = array_merge($product, $session_products);

        $session_node->field_product->setValue($products);
        $session_node->save();
    }
}

/*
 * todo
 */
function studiobridge_store_images_get_open_product($session_id){
  $session = Node::load($session_id);
  $session_uid = $session->getOwnerId();

  $node_id = \Drupal::entityQuery('node')
    ->condition('type', array('products','unmapped_products'),'IN')
    ->sort('created', 'DESC')
    ->condition('field_state','open')
    ->condition('uid',$session_uid)
    ->range(0,1)
    ->execute();
  if(count($node_id)){
    $node_id = reset($node_id);
    return $node = Node::load($node_id);
  }
  else{
    $node_id_unmapped = \Drupal::entityQuery('node')
      ->condition('type', 'unmapped_products')
      ->sort('created', 'DESC')
      ->condition('field_state','open')
      ->condition('uid',$session_uid)
      ->range(0,1)
      ->execute();
    if(count($node_id_unmapped)){
      $node_id_unmapped = array_values($node_id_unmapped);
      return $node = Node::load($node_id_unmapped[0]);
    }else{
      //studiobridge_store_images_create_unmapped_product($image, $session_id);
      return false;
    }
  }
  return false;
}

/*
 * todo
 */
function studiobridge_store_images_open_session_recent(){
  $user = \Drupal::currentUser();
  $uid = $user->id();

  $result = \Drupal::entityQuery('node')
    ->condition('type', 'sessions')
    ->sort('created', 'DESC')
    ->condition('field_status','open')  // todo : poc on structure.
    ->condition('uid',$uid)
    ->range(0,1)
    ->execute();
  if(count($result)){
    return $node_id = reset($result);
  }
  return false;
}

/*
 * todo
 */
function studiobridge_store_images_update_product_as_closed($identifier){

  $node_id = \Drupal::entityQuery('node')
    ->condition('title', $identifier)
    ->sort('created', 'DESC')
   // ->condition('type',array('products','unmapped_products'))
    ->range(0,1)
    ->execute();

  if(count($node_id)){
    $node_id = reset($node_id);
    $product_node = Node::load($node_id);
    $state = array(
      'value' => 'completted'
    );

    $product_node->field_state->setValue($state);
    $product_node->save();

  }
  // todo exception handling
}

/*
 * todo
 */
function studiobridge_store_images_update_product_as_open($identifier){

  $node_id = \Drupal::entityQuery('node')
    ->condition('title', $identifier)
    ->sort('created', 'DESC')
    // ->condition('type',array('products','unmapped_products'))
    ->range(0,1)
    ->execute();

  if(count($node_id)){
    $node_id = reset($node_id);
    $product_node = Node::load($node_id);
    $state = array(
      'value' => 'open'
    );

    $product_node->field_state->setValue($state);
    $product_node->save();

  }
  // todo exception handling
}


/*
 * todo
 */
function studiobridge_store_images_get_product_status_by_identifier($identifier){

  $node_id = \Drupal::entityQuery('node')
    ->condition('title', $identifier)
    ->sort('created', 'DESC')
    // ->condition('type',array('products','unmapped_products'))
    ->range(0,1)
    ->execute();

  if(count($node_id)){
    $node_id = reset($node_id);
    $product_node = Node::load($node_id);
    return $product_node->field_state->getValue();
  }
}

function studiobridge_store_images_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // todo : delete this line
  //drupal_set_message($form_id);
  $user = \Drupal::currentUser();
  $uid = $user->id();

  if($form_id == 'node_sessions_form'){
    $result = \Drupal::entityQuery('node')
      ->condition('type', 'sessions')
      ->condition('uid', $uid)
      ->sort('created', 'DESC')
      ->condition('field_status','open')  // todo : poc on structure.
      ->range(0,1)
      ->execute();
    if(count($result)){
      // todo : dsm will not work because of we are redirecting from httpfoundation.
      // redirect to sessions page
      $response = new Symfony\Component\HttpFoundation\RedirectResponse(base_path().'view-sessions');
      drupal_set_message('There is a open session, please close it to add new session','warning');
      $response->send();
      exit;
    }
  }

}

function studiobridge_store_images_form_node_sessions_form_alter(&$form, FormStateInterface $form_state) {
//  $form_state->setRedirect('view.view_sessions.page_1');
//  return new RedirectResponse('/sessions');
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      $form['actions'][$action]['#submit'][] = 'studiobridge_store_images_upload_enabled_types_submit';
    }
  }
}

function studiobridge_store_images_upload_enabled_types_submit($form, FormStateInterface $form_state) {
  $response = new Symfony\Component\HttpFoundation\RedirectResponse(base_path());
  drupal_set_message('There is a ...');
  $response->send();
  exit;
}